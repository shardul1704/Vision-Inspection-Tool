import cv2
import numpy as np
import imutils

MAX_FEATURES = 500
GOOD_MATCH_PERCENT = 0.15
widthImg, heightImg = 640, 480
#widthImg, heightImg = 480, 640

def preProcessing(img):
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(img, (5,5), 1)

    v = np.median(imgBlur)
    sigma = 0.33
    lower = int(max(0, (1.0 - sigma) * v))
    upper = int(min(255, (1.0 + sigma) * v))
    imgCanny = cv2.Canny(imgBlur, lower, upper)
    kernel = np.ones((5,5))
    imgDial = cv2.dilate(imgCanny, kernel, iterations=2)
    imgThres = cv2.erode(imgDial, kernel, iterations=1)
    return imgThres


def alignImages(im1, im2):
    # Convert images to grayscale
    im1Gray = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)
    im2Gray = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)
    # Detect ORB features and compute descriptors.
    orb = cv2.ORB_create(MAX_FEATURES)
    keypoints1, descriptors1 = orb.detectAndCompute(im1Gray, None)
    keypoints2, descriptors2 = orb.detectAndCompute(im2Gray, None)
    # Match features.
    matcher = cv2.DescriptorMatcher_create(cv2.DESCRIPTOR_MATCHER_BRUTEFORCE_HAMMING)
    matches = matcher.match(descriptors1, descriptors2, None)
    # Sort matches by score
    matches.sort(key=lambda x: x.distance, reverse=False)
    # Remove not so good matches
    numGoodMatches = int(len(matches) * GOOD_MATCH_PERCENT)
    matches = matches[:numGoodMatches]
    # Draw top matches
    imMatches = cv2.drawMatches(im1, keypoints1, im2, keypoints2, matches, None)
    cv2.imwrite("matches.jpg", imMatches)
    # Extract location of good matches
    points1 = np.zeros((len(matches), 2), dtype=np.float32)
    points2 = np.zeros((len(matches), 2), dtype=np.float32)
    for i, match in enumerate(matches):
        points1[i, :] = keypoints1[match.queryIdx].pt
        points2[i, :] = keypoints2[match.trainIdx].pt
    # Find homography
    h, mask = cv2.findHomography(points1, points2, cv2.RANSAC)
    # Use homography
    height, width, channels = im2.shape
    im1Reg = cv2.warpPerspective(im1, h, (width, height))
    return im1Reg, h
    

def templateMatch(img,test,testpt):
    testing = preProcessing(test)
    gray = preProcessing(img)
    (tH, tW) = testing.shape[:2]
    found = None
    for scale in np.linspace(0.2, 1.0, 20)[::-1]:
        resized = imutils.resize(gray, width=int(gray.shape[1] * scale))
        r = gray.shape[1] / float(resized.shape[1])
        if resized.shape[0] < tH or resized.shape[1] < tW:
            break
        edged = resized.copy()
        result = cv2.matchTemplate(edged, testing, cv2.TM_CCOEFF_NORMED)
        (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(result)
        if found is None or maxVal > found[0]:
             found = (maxVal, maxLoc, r)
    (_, maxLoc, r) = found
    (startX, startY) = (int(maxLoc[0] * r), int(maxLoc[1] * r))
    (endX, endY) = (int((maxLoc[0] + tW) * r), int((maxLoc[1] + tH) * r))
   # cv2.rectangle(imReg, (startX, startY), (endX, endY), (0, 255, 0), 1)
    # if found!=None:
    #     if startX >= testpt[0] and startY >= testpt[1] and endX <= testpt[2] and endY <= testpt[3]:
    #         cv2.rectangle(imReg, (startX, startY), (endX, endY), (0, 255, 0), 1)
    #         cv2.putText(imReg, 'Correct', (startX-2,startY-2), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,255,0), 1)
    #     else:
    #         cv2.rectangle(imReg, (startX, startY), (endX, endY), (0, 0, 255), 1)
    #         cv2.putText(imReg, 'Wrong', (startX - 2, startY - 2), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    # else:
    #     cv2.rectangle(imReg, (testpt[0], testpt[1]), (testpt[2], testpt[3]), (255, 0, 0), 1)
    #     cv2.putText(imReg, 'Missing', (testpt[0]-2,testpt[1]-2), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

    if startX>=testpt[0] and startY>=testpt[1] and endX<=testpt[2] and endY<=testpt[3]:
         cv2.rectangle(imReg, (startX, startY), (endX, endY), (0, 255, 0), 1)
         cv2.putText(imReg, 'Correct', (startX-2,startY-2), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,255,0), 1)
    else:
         #print(startX,startY,endX,endY)
         #cv2.rectangle(imReg, (startX, startY), (endX, endY), (0, 0, 255), 1)
         #cv2.putText(imReg, 'Wrong', (startX - 2, startY - 2), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
         cv2.rectangle(imReg, (testpt[0],testpt[1]), (testpt[2],testpt[3]), (0, 0, 255), 1  )
         cv2.putText(imReg, 'Missing', (testpt[0]-2,testpt[1]-2), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)



template = cv2.imread('compressor templates/compressor_template.png')
#template = cv2.imread('compressor_warped.jpg')
cv2.imshow('Master',template)
image = cv2.imread('testing images/Screenshot (77) 1.png')
imReg, h = alignImages(image, template)
cv2.imshow('Warped',imReg)

test1 = cv2.imread('compressor templates/test1.png')
test2 = cv2.imread('compressor templates/test2.png')
test3 = cv2.imread('compressor templates/test3.png')
test4 = cv2.imread('compressor templates/test4.png')
test5 = cv2.imread('compressor templates/test5.png')
test6 = cv2.imread('compressor templates/test6.png')
test7 = cv2.imread('compressor templates/test7.png')
test8 = cv2.imread('compressor templates/test8.png')
test9 = cv2.imread('compressor templates/test9.png')
test10 = cv2.imread('compressor templates/test10.png')

testpt1 = [110,50,230,120]
#testpt1 = [100,55,220,123]
#testpt2 = [446,70,537,228]
testpt2 = [320,27,427,197]
testpt3 = [582,268,732,416]
testpt4 = [463,272,528,325]
testpt5 = [83,22,207,57]
testpt6 = [335,196,410,252]
testpt7 = [326,78,409,194]
testpt8 = [333,437,413,475]
testpt9 = [53,61,144,437]
testpt10 = [733,501,804,591]

templateMatch(imReg,test1,testpt1)
templateMatch(imReg,test2,testpt2)
# templateMatch(imReg,test3,testpt3)
# templateMatch(imReg,test4,testpt4)
# templateMatch(imReg,test5,testpt5)
# templateMatch(imReg,test6,testpt6)
# templateMatch(imReg,test7,testpt7)
# templateMatch(imReg,test8,testpt8)
# templateMatch(imReg,test9,testpt9)
# templateMatch(imReg,test10,testpt10)

cv2.imshow('Result',imReg)
cv2.waitKey(0)